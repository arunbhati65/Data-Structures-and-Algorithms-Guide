import java.util.*;

class Solution {
    public int[][] merge(int[][] intervals) {
        // Step 1: Sort intervals by start time (already in your logic)
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });

        // Step 2: Use a list to store merged intervals
        List<int[]> merged = new ArrayList<>();
        merged.add(intervals[0]); // Add the first interval

        // Step 3: Merge overlapping intervals
        for (int i = 1; i < intervals.length; ++i) {
            int[] last = merged.get(merged.size() - 1); // Get the last interval in the merged list
            
            if (last[1] >= intervals[i][0]) { // If overlapping, merge intervals
                last[1] = Math.max(last[1], intervals[i][1]);
            } else {
                merged.add(intervals[i]); // Otherwise, add as a new interval
            }
        }

        // Step 4: Convert list to 2D array
        return merged.toArray(new int[merged.size()][]);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] intervals = { {2, 3}, {2, 2}, {3, 3}, {1, 3}, {5, 7}, {2, 2}, {4, 6} };
        int[][] merged = sol.merge(intervals);
        
        for (int[] interval : merged) {
            System.out.println(Arrays.toString(interval));
        }
    }
}

//Given a collection of intervals, merge all overlapping intervals.
class PairComparator implements Comparator<int[]>{ 
    public int compare(int[] p1, int[] p2) { 
        return p1[0]-p2[0];
    } 
} 
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length==0) return intervals;
        Arrays.sort(intervals,new Comparator<int[]>(){
            public int compare(int[] ob1,int[] ob2){
                return ob1[0]-ob2[0];
            }
        });
        LinkedList<int[]> list=new LinkedList<>();
        list.add(intervals[0]);
        for(int i=1;i<intervals.length;++i){
            if(list.get(list.size()-1)[1]>=intervals[i][0]){
                list.get(list.size()-1)[1]=Math.max(intervals[i][1],list.get(list.size()-1)[1]);
            }else{
                list.add(intervals[i]);    
            }
        }
        return list.toArray(new int[list.size()][]);
    }
}
