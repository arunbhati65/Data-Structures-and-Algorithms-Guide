1)Greedy -  JumpGame(M,goodPosition),
            meetingRoom(SortArray,pQ),
            mergeIntervals(sortArray,PQ),
            bestTimeToBuyAndSellStock(minStock,and maxProfit),
            Most Common Word(forLoop,split by space or check for empty spaces,HashMap),
            ContainerWithMostWater(most Distance,Contract the lowest one,Two Pointer),
            TrappingRainWater(2 array)
2)DP- JumpGame(M,forLoop),
      maximumSubarray(S[i]=max(S[i-1]+arr[i],arr[i]))
      WordBreak(slidingWindow wont work,recursion+for Loop to check all posibility,memo to reduce time complexity)
      CoinChange(recursion+forLoop,maximum value is amount+1,memo),
      MinpathSum(DP)
      ClimbingStairs(DP no recursion solution),
      UniquePaths(DP solution),
      Edit Distance(DP Math.min 3 times)
      fact(n)=n*fact(n-1); (n=0 || n=1)->1
      fibonaci(n)=fibonaci(n-1)+fibonaci(n-2); 
      LCS(char[] arr1,char[] arr2,arr1.length-1,arr2.length-1)=
                          arr1[i1]==arr[i2] -->1+LCS(arr1,arr2,i1-1,i2-1);
                          else
                          Max(LCS(arr1,arr2,i1-1,i2),LCS(arr1,arr2,i1,i2-1));                            
      Maximum continuous Sub Array - MCS(int [] arr,arr.length-1) = max(arr[i],MCS(arr,i-1));
      Longest Increasing SubArray  - Max(LIS[])  -> where -> LIS[i]=1+max(LIS[j]) where  (0>=j<i)
      Coin Change ------------------ minCoinChange(int [] coins,amount) ->
                                                        for(j=0->coins.length){
                                                        result[amount] = Math.min( result[amount] , minCoinChange( coins,amount-coins[j])
                                                        }	
                                                //here we are repeating this for different amount leift
      KnapSAck --------------------- take one item or not - total two decisions required
                                                //here we are repeating for different weight left
                                                //also we are pickig one item only once
6)SubString - longestPalindromincSubString(each index as center,func(index,index),func(index,index))
              Find All Anagrams in a String(backtracking)
              longestPalindromicSubSequence(i+1,j-1)
              longestCommonSubSequence(0 if i or j grater than length,1+lcs(i+1,j+1),max(lcs(i+1,j),lcs(i,j+1)))
              longestIncreasingSubSequence(LIS[i]=Math.max(1+LIS[j])  , 0<=j<i)
              longestConsecutiveSequence(************)
              longestNonRepeatingSubString(********)
              longestProductInArray(***********)
3)Permutation/Combination-letterCombinationsOfPhoneLetter(forLoop,order maintained),
                          Permutations(forLoop,OrderNeed to be changed,swap)
                          GenerateParenthesis(forLoop)
4)String - removeAllAdjacentDuplicates(E,StringBuilder),
           ReverseString(Two Pointer) ,
           FirstUniqueCharaterInAString(2 for loop) ,
           ATOI('0' && '9' numbers between these character including these two)
           Implement strStr() KMP(*******)
           Reverse String(two pointer)
           Reverse Words in a String(two pointer)
5)SlidingWindow- longestSubStringWithoutRepeatingCharacter(HashMap) ,
                 MinimumWindowSubString(HashMap,patCount,dict),
                 SlidingWindowMax(***********)
7)Tree- BTMaximumPathSum(DFS),
        SerializeAndDeserializeBT(DFS),
        Diameter(Depth modified,global variable),
        LCA(left and right not null return node),
        SpiralTrraverse(2 Stack),
        SymetricTree(DFS,left,right pass as arguments),
        validateBST(inOrder),
        BTRightSideVeiw(LevelOrderTraversal),
        DepthOfBT(max of left ,right),
        ConstructBTFromPreOrderInOrderTraversal(map of inorder values and index, global variable for preorder, range of l and h for inorder , return null l>h and preorderVariable==n)
        Flatten Binary Tree to Linked List(Inorder Traversal)
        Convert Sorted List to Binary Search Tree(middle of linked list,newnode=midle.data and  middle.next=null;)
        Construct Binary Tree from Inorder and Postorder Traversal(Same as preOrder and inorder, just start from right side)
        Kth Smallest Element in a BST(counter inorder traversal)
        Populating Next Right Pointers in Each Node(Intutive Approach, left pointer, using previously set next pointer)
        Range Sum of BST(Inorder traversal)
        All Elements in Two Binary Search Trees(flatten two tree and merge two linkd list)
        Invert Binary Tree(Inorder Traversal temp variable swap)
        Binary Tree Vertical Order Traversal(order,level,pre order traversal,map of int,Pair getKey getValue new Pair)
        All Nodes Distance K in Binary Tree(Level Order Traversal, covert tree into graph)
        Boundary of Binary Tree(add left,leaves,right boundary seperately)
        Two Sum BSTs(inorder traversal, BST search)
        Binary Search Tree to Greater Sum Tree(right to left reverse of inorder)
8)Heap- medianFromStreamOfData(minHeap,MaxHeap),
        mergeKSortedList(pq),
        MergeSortedArray(pq,Custom Class)
9)Stack-minStack(2 stack,linkedList) ,
        VaildParenthesis(Stack,hashMap),
        LargestRectangleInHistogram(**************),
        Span(*************)
10)List-addTwoNumber(while Loop),
        ReverseNodeInKGroup(ReverSe Function with limit K,calculate total element first,dummy),
        CloneWithRandomPointer(HashMap or changeStructureoFOriginal List),
        reverseLinkedList(prev) ,
        middleOfALinkedList(2 pointer),
        RemoveNthNodeFromEndOfList(2Pointer),
        Intersection of Two Linked Lists(two pointer)
        Sort List(find middle,get single entity,merge them in order)
        Linked List Cycle(two pointer)
11)Design-     lRU(Map,doublyLinkedList),
               InsertDeleteGetRandomO1Time(Map,LinkedList),
               Design HashMap(*******)
               Design HashSet(******)
12)selection - MedianOfTwoSortedArray(Binary Searching,Ypos=(X+Y+1)/2-XPos,XPosmin,XPosmax,YPosmin,YPosmax),
               TopKFrequentElement(HashMap,partiton method),
               KthLargestElement(partition)  
               KClosestPointsToOrigin
               KthLargestElementInAStreamOfData(partiition,MINHeap)
13)Searching - modifiedBinarySearch(search is sorted parst first)
               kadane(********)
14)Array-TwoSum(HashMap or Sort),
         ThreeSum(TwoSum),
         FloodFill(2 array),
         ProductOfArrayAcceptSelf(2 array left and right),
         RemoveDuplicatesFromSortedArray(index++ if not equal to prev)
         Find First and Last Position of Element in Sorted Array(2 variable approach)
         Maximum Product of Two Elements in an Array(2 variable )
         Move Zeroes(count number of zeroes)
15)Hashing-GroupAnagram
16)Matrix- numberOfIslands(DFS,visitedFirstTimeCount),
           WordSearch(DFS,reach index n-1 of pattern to search),
           FloodFill(DFS),
           MaxAreaOfIsland,
           Rotting Orange,
           GameOfLife,
           MinimumPathSum(DP),
           RotateMatrix(transponse and suffle columns),
           SearchAMatrix(binary search)
           Set Matrix Zeroes(if arr[i][j]==0  arr[i][0]=0  arr[0][j]=0 trick)
           Surrounded Regions(start from end with 0)
17)Math-CountPrimes(visited,multiplication) ,
        FirstMissingNumber(n)(n+1)/2),
        ReverseInteger(/10 %10 until 0),
        SquareRoot(binary Search),
        FirstMissingPositiveNumber(negate by index,range is limited),
        FindDuplicateElement(negate by index,range is limited)
19)BitManupilation - BinaryNumberToDcimalNumber(s^index)
20)Graph- Course Schedule(*******)
          Find the Town Judge(*********)
          Critical Connections in a Network(*******)
          Graph Valid Tree(**********)
21)Trie- **********
22)Divide and Concur *********
23)Greedy Algo ********
24)System Design Questions

*********** Pending Cheats
